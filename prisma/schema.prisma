// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id                     String                   @id @default(uuid())
  razaoSocial            String
  nomeFantasia           String?
  inscricaoMunicipal     String?
  inscricaoEstadual      String?
  cnpj                   String
  dataCadastro           DateTime?                @default(now())
  dataAtualizado         DateTime?
  ativo                  Boolean                  @default(true)
  matriz                 Boolean                  @default(false)
  cnae                   String                   @default("")
  atividadePrincipal     String                   @default("")
  regimeTributario       String                   @default("")
  tamanhoEmpresa         String                   @default("")
  comercio               Boolean                  @default(false)
  ecommerce              Boolean                  @default(false)
  industria              Boolean                  @default(false)
  servicos               Boolean                  @default(false)
  faturamentoUltimoAno   Decimal                  @default(0)
  quantidadeFuncionarios Decimal                  @default(0)
  Usuario                Usuario[]
  EnderecoEmpresa        EnderecoEmpresa[]
  ContaFixa              Conta[]
  TipoLancamento         TipoLancamento[]
  CategoriaLancamento    CategoriaLancamento[]
  Lancamento             Lancamento[]
  Financeiro             Financeiro[]
  FormaPagamento         FormaPagamento[]
  Ocorrencia             Ocorrencia[]
  FinanceiroCategoria    FinanceiroCategoria[]
  TipoConta              TipoConta[]
  ContatoTipo            ContatoTipo[]
  Tipo                   Tipo[]
  Classificacao          Classificacao[]
  Pessoa                 Pessoa[]
  Produto                Produto[]
  UnidadeMedida          UnidadeMedida[]
  ModeloNegocio          ModeloNegocio[]
  Orcamento              Orcamento[]
  Midias                 Midias[]
  Entregavel             Entregavel[]
  CondicaoPagamento      CondicaoPagamento[]
  NotasRodape            NotasRodape[]
  PessoaFilial           PessoaFilial[]
  ModeloOrcamentoItem    ModeloOrcamentoItem[]
  CadastroDescricao      CadastroDescricao[]
  Projeto                Projeto[]
  ContasPagar            ContasPagar[]
  Departamento           Departamento[]
  CentroCusto            CentroCusto[]
  NovoProduto            NovoProduto[]
  PedidoCompra           PedidoCompra[]
  SubCategoriaLancamento SubCategoriaLancamento[]
  ContasReceber          ContasReceber[]
  ContaFinanceiro        ContaFinanceiro[]
  OrcamentoDepto         OrcamentoDepto[]
  ContatoEmpresa         ContatoEmpresa[]
}

model Usuario {
  id                    String                  @id @default(uuid())
  nome                  String
  email                 String                  @unique
  senha                 String
  nascimento            DateTime                @default(now())
  cpf                   String                  @default("")
  rg                    String                  @default("")
  dataAdmissao          DateTime                @default(now())
  pispasep              String                  @default("")
  ctps                  String                  @default("")
  codigo                String                  @default("")
  salario               Decimal                 @default(0.0)
  empresa               Empresa                 @relation(fields: [idEmpresa], references: [id])
  idEmpresa             String
  ativo                 Boolean                 @default(true)
  Permissao             Permissao[]
  Orcamento             Orcamento[]
  RascunhoOrcamento     RascunhoOrcamento[]
  Projeto               Projeto[]
  ProjetoItem           ProjetoItem[]
  ProjetoAprovador      ProjetoAprovador[]
  AcompanhamentoItem    AcompanhamentoItem[]
  Apontamento           Apontamento[]
  ApontamentoComentario ApontamentoComentario[]
  ApontamentoArquivo    ApontamentoArquivo[]
  ContasPagar           ContasPagar[]
  PedidoCompra          PedidoCompra[]
  responsavel           PedidoCompra[]          @relation("responsavelCompra")
  OrcamentoDepto        OrcamentoDepto[]
  ContasReceber         ContasReceber[]
  UsuarioEndereco       UsuarioEndereco[]
  UsuarioContato        UsuarioContato[]
}

model UsuarioEndereco {
  id          String   @id @default(uuid())
  usuario     Usuario  @relation(fields: [idUsuario], references: [id])
  idUsuario   String
  cep         String
  local       String
  numero      String
  bairro      String
  complemento String?
  observacao  String?
  cidade      String
  estado      String
  ativo       Boolean? @default(true)
  principal   Boolean? @default(false)
}

model UsuarioContato {
  id        String  @id @default(uuid())
  usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario String
  nome      String
  cargo     String
  telefone  String
  email     String
  principal Boolean @default(false)
  ativo     Boolean @default(true)
}

model MatrizFilial {
  id       String  @id @default(uuid())
  idMatriz String
  idFilial String
  ativo    Boolean @default(true)
}

model Permissao {
  id        String  @id @default(uuid())
  usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario String
  item      String
}

model EnderecoEmpresa {
  id          String   @id @default(uuid())
  empresa     Empresa  @relation(fields: [idEmpresa], references: [id])
  idEmpresa   String
  cep         String
  local       String
  numero      String
  bairro      String
  complemento String?
  cidade      String
  estado      String
  ativo       Boolean? @default(true)
  principal   Boolean? @default(false)
}

model ContatoEmpresa {
  id        String  @id @default(uuid())
  empresa   Empresa @relation(fields: [idEmpresa], references: [id])
  idEmpresa String
  nome      String
  cargo     String
  telefone  String
  email     String
  principal Boolean @default(false)
  ativo     Boolean @default(true)
}

model Tipo {
  id        String   @id @default(uuid())
  nome      String
  empresa   Empresa  @relation(fields: [idEmpresa], references: [id])
  idEmpresa String
  ativo     Boolean  @default(true)
  Pessoa    Pessoa[]
}

model Classificacao {
  id        String   @id @default(uuid())
  nome      String
  empresa   Empresa  @relation(fields: [idEmpresa], references: [id])
  idEmpresa String
  ativo     Boolean  @default(true)
  Pessoa    Pessoa[]
}

model Pessoa {
  id                       String                  @id @default(uuid())
  tipo                     Tipo                    @relation(fields: [idTipo], references: [id])
  idTipo                   String
  nome                     String
  documento                String?
  razaoSocial              String?
  nomeFantasia             String?
  inscricaoMunicipal       String?
  inscricaoEstadual        String?
  ativo                    Boolean?                @default(true)
  dataCadastro             DateTime?               @default(now())
  contribuinte             String
  Contato                  Contato[]
  EnderecoPessoa           EnderecoPessoa[]
  Lancamento               Lancamento[]
  Financeiro               Financeiro[]
  Classificacao            Classificacao?          @relation(fields: [classificacaoId], references: [id])
  classificacaoId          String?
  empresa                  Empresa?                @relation(fields: [idEmpresa], references: [id])
  idEmpresa                String?
  empresaSaida             Orcamento[]             @relation("empresaSaida")
  cliente                  Orcamento[]             @relation("clientePessoa")
  agencia                  Orcamento[]             @relation("agenciaPessoa")
  PessoaFilial             PessoaFilial[]          @relation("filialPessoal")
  clienteAgencia           PessoaFilial[]          @relation("agenciaClienteFilial")
  ProjetoPessoa            ProjetoPessoa[]
  ProjetoOS                ProjetoOS[]
  ContasPagar              ContasPagar[]           @relation("responsavelContasPagar")
  NovoProdutoFornecedor    NovoProdutoFornecedor[]
  PedidoCompra             PedidoCompra[]
  clienteContaReceber      ContasReceber[]         @relation("clientePessoaC")
  empresaSaidaContaReceber ContasReceber[]         @relation("empresaSaidaC")
  PessoaContaFinanceiro    PessoaContaFinanceiro[]
  ContaFinanceiro          ContaFinanceiro[]       @relation("empresaSaidaContaFinanceiro")
  empresaSaidaContasPagar  ContasPagar[]           @relation("empresaSaidaContasPagar")
  PedidoCompraSaida        PedidoCompra[]          @relation("empresaSaidaCompras")
}

model PessoaFilial {
  id             String  @id @default(uuid())
  idFilial       String
  filial         Pessoa? @relation("filialPessoal", fields: [idFilial], references: [id])
  idPessoa       String
  clienteAgencia Pessoa? @relation("agenciaClienteFilial", fields: [idPessoa], references: [id])
  idEmpresa      String
  empresa        Empresa @relation(fields: [idEmpresa], references: [id])
}

model ContatoTipo {
  id        String  @id @default(uuid())
  nome      String
  empresa   Empresa @relation(fields: [idEmpresa], references: [id])
  idEmpresa String
}

model Contato {
  id        String   @id @default(uuid())
  pessoa    Pessoa   @relation(fields: [idPessoa], references: [id])
  idPessoa  String
  nome      String   @default("")
  cargo     String   @default("")
  telefone  String   @default("")
  email     String   @default("")
  principal Boolean  @default(false)
  ativo     Boolean? @default(true)
}

model EnderecoPessoa {
  id          String   @id @default(uuid())
  pessoa      Pessoa   @relation(fields: [idPessoa], references: [id])
  idPessoa    String
  cep         String
  local       String
  numero      String
  bairro      String
  complemento String?
  cidade      String
  estado      String
  ativo       Boolean? @default(true)
  principal   Boolean? @default(false)
}

model TipoConta {
  id              String            @id @default(uuid())
  empresa         Empresa           @relation(fields: [idEmpresa], references: [id])
  idEmpresa       String
  descricao       String
  Conta           Conta[]
  ContasReceber   ContasReceber[]
  ContaFinanceiro ContaFinanceiro[]
}

model Conta {
  id          String    @id @default(uuid())
  empresa     Empresa   @relation(fields: [idEmpresa], references: [id])
  idEmpresa   String
  tipoconta   TipoConta @relation(fields: [idTipoConta], references: [id])
  idTipoConta String
  banco       String
  agencia     String
  conta       String
  ativo       Boolean?  @default(true)
}

model TipoLancamento {
  id        String   @id @default(uuid())
  empresa   Empresa  @relation(fields: [idEmpresa], references: [id])
  idEmpresa String
  nome      String
  ativo     Boolean? @default(true)
}

model CategoriaLancamento {
  id        String   @id @default(uuid())
  empresa   Empresa  @relation(fields: [idEmpresa], references: [id])
  idEmpresa String
  nome      String
  ativo     Boolean? @default(true)
}

model SubCategoriaLancamento {
  id                    String              @id @default(uuid())
  nome                  String
  empresa               Empresa             @relation(fields: [idEmpresa], references: [id])
  idEmpresa             String
  FinanceiroCategoria   FinanceiroCategoria @relation(fields: [categoriaLancamentoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoriaLancamentoId String
  ativo                 Boolean?            @default(true)
  ContasPagar           ContasPagar[]
}

model Lancamento {
  id              String       @id @default(uuid())
  empresa         Empresa      @relation(fields: [idEmpresa], references: [id])
  idEmpresa       String
  pessoa          Pessoa?      @relation(fields: [idPessoa], references: [id])
  idPessoa        String?
  data            DateTime
  competencia     DateTime
  vencimento      DateTime
  acrescimo       Decimal
  desconto        Decimal
  valor           Decimal
  tipo            String
  texto           String?
  contaPagarId    String?
  contaReceberId  String?
  pago            Boolean      @default(false)
  dataPago        DateTime?
  tipoRecebimento String
  obs             String
  ContaSaldo      ContaSaldo[]
}

model FormaPagamento {
  id         String       @id @default(uuid())
  empresa    Empresa      @relation(fields: [idEmpresa], references: [id])
  idEmpresa  String
  nome       String
  Financeiro Financeiro[]
  ProjetoOS  ProjetoOS[]
}

model Ocorrencia {
  id         String       @id @default(uuid())
  empresa    Empresa      @relation(fields: [idEmpresa], references: [id])
  idEmpresa  String
  nome       String
  Financeiro Financeiro[]
}

model FinanceiroCategoria {
  id         String       @id @default(uuid())
  empresa    Empresa      @relation(fields: [idEmpresa], references: [id])
  idEmpresa  String
  nome       String
  Financeiro Financeiro[]

  SubCategoriaLancamento SubCategoriaLancamento[]
  ContasPagar            ContasPagar[]
}

model Financeiro {
  id                    String               @id @default(uuid())
  empresa               Empresa              @relation(fields: [idEmpresa], references: [id])
  idEmpresa             String
  pessoa                Pessoa               @relation(fields: [idPessoa], references: [id])
  idPessoa              String
  formapagamento        FormaPagamento       @relation(fields: [formaPagamentoId], references: [id])
  formaPagamentoId      String
  vencimento            DateTime
  vecimentoOriginal     DateTime
  valor                 Decimal
  emissao               DateTime?            @default(now())
  competencia           DateTime?            @default(now())
  documento             String?
  texto                 String?
  arquivo               String?
  Ocorrencia            Ocorrencia?          @relation(fields: [ocorrenciaId], references: [id])
  ocorrenciaId          String?
  FinanceiroCategoria   FinanceiroCategoria? @relation(fields: [financeiroCategoriaId], references: [id])
  financeiroCategoriaId String?
  dataPagamento         String
}

model UnidadeMedida {
  id                       String                     @id @default(uuid())
  empresa                  Empresa                    @relation(fields: [idEmpresa], references: [id])
  idEmpresa                String
  nome                     String
  ativo                    Boolean                    @default(true)
  ProdutoUnidade           ProdutoUnidade[]
  OrcamentoItem            OrcamentoItem[]
  ModeloOrcamentoItemList  ModeloOrcamentoItemList[]
  ProjetoItem              ProjetoItem[]
  ProjetoOS                ProjetoOS[]
  NovoProduto              NovoProduto[]
  PedidoCompraItens        PedidoCompraItens[]
  PedidoCompraServicoItens PedidoCompraServicoItens[]
}

model Produto {
  id                       String                     @id @default(uuid())
  empresa                  Empresa                    @relation(fields: [idEmpresa], references: [id])
  idEmpresa                String
  nome                     String
  ativo                    Boolean                    @default(true)
  ProdutoUnidade           ProdutoUnidade[]
  OrcamentoItem            OrcamentoItem[]
  ModeloOrcamentoItemList  ModeloOrcamentoItemList[]
  ProjetoItem              ProjetoItem[]
  PedidoCompraServicoItens PedidoCompraServicoItens[]
}

model ProdutoUnidade {
  id                  String             @id @default(uuid())
  unidade             UnidadeMedida      @relation(fields: [unidadeMedidaId], references: [id])
  unidadeMedidaId     String
  produto             Produto            @relation(fields: [produtoId], references: [id])
  diasPgto            String
  produtoId           String
  valorMin            Decimal
  valorMax            Decimal
  principal           Boolean            @default(false)
  condicaoPagamentoId String?            @default("")
  CondicaoPagamento   CondicaoPagamento? @relation(fields: [condicaoPagamentoId], references: [id])
}

model ModeloNegocio {
  id              String      @id @default(uuid())
  empresa         Empresa     @relation(fields: [idEmpresa], references: [id])
  idEmpresa       String
  nome            String
  dataCriacao     DateTime    @default(now())
  validade        DateTime
  descricao       String
  metaFaturamento Decimal
  metaLucro       Decimal
  custoFixo       Decimal
  custoVenda      Decimal
  imposto         Decimal
  desconto        Decimal
  Orcamento       Orcamento[]
}

model CondicaoPagamento {
  id             String           @id @default(uuid())
  empresa        Empresa          @relation(fields: [idEmpresa], references: [id])
  idEmpresa      String
  nome           String
  parcelas       Decimal          @default(1)
  baixaPrimeira  Boolean          @default(false)
  entrada        Boolean          @default(false)
  diaFixo        Decimal          @default(1)
  Orcamento      Orcamento[]
  ProdutoUnidade ProdutoUnidade[]
  ContasPagar    ContasPagar[]
  PedidoCompra   PedidoCompra[]
  ContasReceber  ContasReceber[]
}

model Midias {
  id              String            @id @default(uuid())
  empresa         Empresa           @relation(fields: [idEmpresa], references: [id])
  idEmpresa       String
  nome            String
  ativo           Boolean           @default(true)
  OrcamentoMidias OrcamentoMidias[]
}

model Entregavel {
  id              String            @id @default(uuid())
  empresa         Empresa           @relation(fields: [idEmpresa], references: [id])
  idEmpresa       String
  nome            String
  ativo           Boolean           @default(true)
  EntregavelItens EntregavelItens[]
}

model Orcamento {
  id                     Int                  @id @default(autoincrement())
  empresa                Empresa              @relation(fields: [idEmpresa], references: [id])
  idEmpresa              String
  versao                 Int
  dataCriacao            DateTime             @default(now())
  dataEdicao             DateTime             @default(now())
  data                   DateTime
  empresaSaida           Pessoa?              @relation("empresaSaida", fields: [empresaSaiadaId], references: [id])
  empresaSaiadaId        String?
  cliente                Pessoa?              @relation("clientePessoa", fields: [clientId], references: [id])
  clientId               String?
  nome                   String
  status                 String
  nomeVersao             String               @default("Versão Inicial")
  notas                  String
  contatoCliente         String
  contatoClienteTelefone String
  contatoClienteEmail    String
  agencia                Pessoa?              @relation("agenciaPessoa", fields: [agenciaId], references: [id])
  agenciaId              String?
  showAgencia            Boolean
  contatoAgencia         String?
  contatoAgenciaTelefone String?
  contatoAgenciaEmail    String?
  condicaoPagamento      CondicaoPagamento    @relation(fields: [condicaoPagamentoId], references: [id])
  condicaoPagamentoId    String
  validade               DateTime
  carta                  String               @default("")
  periodoVeiculacao      String
  OrcamentoMidias        OrcamentoMidias[]
  EntregavelItens        EntregavelItens[]
  Usuario                Usuario?             @relation(fields: [usuarioId], references: [id])
  usuarioId              String?
  modeloNegocio          ModeloNegocio?       @relation(fields: [modeloNegocioId], references: [id])
  modeloNegocioId        String?
  OrcamentoCategoria     OrcamentoCategoria[]
  tipoAcrescimo          String               @default("0")
  acrescimo              Decimal
  tipoComissao           String               @default("0")
  comissao               Decimal
  notaRodape             NotasRodape?         @relation(fields: [notaRodapeId], references: [id])
  notaRodapeId           String?
  notaRodateTexto        String
  tipoDesconto           String               @default("0")
  desconto               Decimal
  total                  Decimal
  CadastroDescricao      CadastroDescricao?   @relation(fields: [cadastroDescricaoId], references: [id])
  cadastroDescricaoId    String?
  descricao              String
  Projeto                Projeto[]
  ProjetoAprovacao       ProjetoAprovacao[]
}

model OrcamentoCategoria {
  id               String             @id @default(uuid())
  Orcamento        Orcamento?         @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  orcamentoId      Int?
  OrcamentoItem    OrcamentoItem[]
  descricao        String
  valor            Decimal
  OrcamentoProduto OrcamentoProduto[]
}

model OrcamentoItem {
  id                   String             @id @default(uuid())
  orcamentoCategoria   OrcamentoCategoria @relation(fields: [orcamentoCategoriaId], references: [id], onDelete: Cascade)
  orcamentoCategoriaId String
  produto              Produto            @relation(fields: [produtoId], references: [id])
  produtoId            String
  descricao            String?
  unidade              UnidadeMedida?     @relation(fields: [unidadeMedidaId], references: [id])
  unidadeMedidaId      String?
  quantidade           Decimal
  valorUn              Decimal
  valorTotal           Decimal
}

model OrcamentoProduto {
  id                   String             @id @default(uuid())
  orcamentoCategoria   OrcamentoCategoria @relation(fields: [orcamentoCategoriaId], references: [id], onDelete: Cascade)
  orcamentoCategoriaId String
  NovoProduto          NovoProduto        @relation(fields: [novoProdutoId], references: [id])
  novoProdutoId        String
  descricao            String?
  quantidade           Decimal
  valorUn              Decimal
  valorTotal           Decimal
}

model OrcamentoMidias {
  id          String     @id @default(uuid())
  orcamento   Orcamento? @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  orcamentoId Int?
  midias      Midias     @relation(fields: [midiasId], references: [id])
  midiasId    String
}

model EntregavelItens {
  id           String     @id @default(uuid())
  entregavel   Entregavel @relation(fields: [entregavelId], references: [id])
  entregavelId String
  Orcamento    Orcamento  @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  orcamentoId  Int
  quantidade   Int
  descricao    String     @default("")
}

model NotasRodape {
  id        String      @id @default(uuid())
  nome      String
  descricao String
  empresa   Empresa     @relation(fields: [idEmpresa], references: [id])
  idEmpresa String
  Orcamento Orcamento[]
}

model ModeloOrcamentoItem {
  id                           String                         @id @default(uuid())
  empresa                      Empresa                        @relation(fields: [idEmpresa], references: [id])
  idEmpresa                    String
  nome                         String
  ModeloOrcamentoItemCategoria ModeloOrcamentoItemCategoria[]
}

model ModeloOrcamentoItemCategoria {
  id                             String                           @id @default(uuid())
  descricao                      String
  valor                          Decimal
  modeloOrcamentoItem            ModeloOrcamentoItem              @relation(fields: [modeloOrcamentoItemId], references: [id], onDelete: Cascade)
  modeloOrcamentoItemId          String
  ModeloOrcamentoItemList        ModeloOrcamentoItemList[]
  ModeloOrcamentoItemProdutoList ModeloOrcamentoItemProdutoList[]
}

model ModeloOrcamentoItemList {
  id                             String                       @id @default(uuid())
  modeloOrcamentoItemCategoria   ModeloOrcamentoItemCategoria @relation(fields: [modeloOrcamentoItemCategoriaId], references: [id], onDelete: Cascade)
  modeloOrcamentoItemCategoriaId String
  produto                        Produto                      @relation(fields: [produtoId], references: [id])
  produtoId                      String
  descricao                      String?
  unidade                        UnidadeMedida?               @relation(fields: [unidadeMedidaId], references: [id])
  unidadeMedidaId                String?
  quantidade                     Decimal
  valorUn                        Decimal
  valorTotal                     Decimal
}

model ModeloOrcamentoItemProdutoList {
  id                             String                       @id @default(uuid())
  modeloOrcamentoItemCategoria   ModeloOrcamentoItemCategoria @relation(fields: [modeloOrcamentoItemCategoriaId], references: [id], onDelete: Cascade)
  modeloOrcamentoItemCategoriaId String
  NovoProduto                    NovoProduto                  @relation(fields: [novoProdutoId], references: [id])
  novoProdutoId                  String
  descricao                      String?
  quantidade                     Decimal
  valorUn                        Decimal
  valorTotal                     Decimal
}

model RascunhoOrcamento {
  id        Int      @id @default(autoincrement())
  Usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId String?
  rascunho  String   @db.Text
  data      DateTime @default(now())
}

model CadastroDescricao {
  id        String      @id @default(uuid())
  nome      String
  descricao String
  empresa   Empresa     @relation(fields: [idEmpresa], references: [id])
  idEmpresa String
  Orcamento Orcamento[]
}

model ProjetoAprovacao {
  id                String    @id @default(uuid())
  Orcamento         Orcamento @relation(fields: [orcamentoId], references: [id])
  orcamentoId       Int
  cabecalhoAprovado Boolean   @default(true)
  obsCabecalho      String
  itensAprovado     Boolean   @default(true)
  obsItens          String
  calculoAprovado   Boolean   @default(true)
  obsCalculo        String
}

model Projeto {
  id                   Int                @id @default(autoincrement())
  empresa              Empresa?           @relation(fields: [idEmpresa], references: [id])
  idEmpresa            String
  Orcamento            Orcamento?         @relation(fields: [orcamentoId], references: [id])
  orcamentoId          Int
  Usuario              Usuario?           @relation(fields: [usuarioId], references: [id])
  usuarioId            String
  dataCriacao          DateTime           @default(now())
  dataEdicao           DateTime           @default(now())
  ProjetoCategoria     ProjetoCategoria[]
  aprovado             Boolean            @default(false)
  aprovadoCalculo      Boolean            @default(false)
  Acompanhamento       Acompanhamento[]
  descricao            String?
  ProjetoAprovador     ProjetoAprovador[]
  ProjetoPessoa        ProjetoPessoa[]
  linkDiretor          String
  linkPastaExecutiva   String
  linkPastaFinalizacao String
  resumoCronograma     String
  linkCronograma       String
  notasInternas        String
  notasClienteAgencia  String
  notasFaturamento     String
  ProjetoContato       ProjetoContato[]
  ProjetoArquivos      ProjetoArquivos[]
  ProjetoCiddade       ProjetoCidade[]
  status               String             @default("0")
  metaEconomia         Decimal            @default(0)
  reducaoGloblal       Decimal            @default(0)
  valorReduzido        String             @default("0")
  limiteManejo         String             @default("0")
  valorManejo          String             @default("0")
  taxaEconomia         String             @default("0")
  valorEconomia        String             @default("0")
  percentualProdutor   String             @default("0")
  retornoProdutor      String             @default("0")
}

model ProjetoCategoria {
  id                      String                    @id @default(uuid())
  Projeto                 Projeto                   @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  projetoId               Int
  descricao               String
  valor                   Decimal
  orcado                  Decimal
  trabalhado              Decimal
  executado               Decimal
  ProjetoItem             ProjetoItem[]
  aprovado                Boolean                   @default(false)
  AcompanhamentoCategoria AcompanhamentoCategoria[]
  metaReducao             Decimal
  travado                 Boolean
  porcentagemManejo       String
  valorManejo             String
  porcentagemReducao      String
  valorReducao            String
  ProjetoOS               ProjetoOS[]
  ProjetoProduto          ProjetoProduto[]
}

model ProjetoItem {
  id                 String           @id @default(uuid())
  ProjetoCategoria   ProjetoCategoria @relation(fields: [projetoCategoriaId], references: [id], onDelete: Cascade)
  projetoCategoriaId String
  produto            Produto          @relation(fields: [produtoId], references: [id])
  produtoId          String
  descricao          String?
  unidade            UnidadeMedida?   @relation(fields: [unidadeMedidaId], references: [id])
  unidadeMedidaId    String?
  quantidade         Decimal
  valorUn            Decimal
  valorTotal         Decimal
  orcado             Decimal
  trabalhado         Decimal
  executado          Decimal
  Usuario            Usuario?         @relation(fields: [usuarioId], references: [id])
  usuarioId          String?
  aprovado           Boolean          @default(false)
  metaReducao        Decimal
  travado            Boolean
  porcentagemManejo  String
  valorManejo        String
  porcentagemReducao String
  valorReducao       String
  ProjetoOS          ProjetoOS[]
}

model ProjetoProduto {
  id                 String           @id @default(uuid())
  ProjetoCategoria   ProjetoCategoria @relation(fields: [projetoCategoriaId], references: [id], onDelete: Cascade)
  projetoCategoriaId String
  NovoProduto        NovoProduto      @relation(fields: [novoProdutoId], references: [id])
  novoProdutoId      String
  descricao          String?
  quantidade         Decimal
  valorUn            Decimal
  valorTotal         Decimal
}

model ProjetoAprovador {
  id        String  @id @default(uuid())
  Projeto   Projeto @relation(fields: [projetoId], references: [id])
  projetoId Int
  Usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId String
  nivel     Int
}

model ProjetoPessoa {
  id        String  @id @default(uuid())
  Projeto   Projeto @relation(fields: [projetoId], references: [id])
  projetoId Int
  Pessoa    Pessoa  @relation(fields: [pessoaId], references: [id])
  pessoaId  String
}

model ProjetoContato {
  id        String   @id @default(uuid())
  Projeto   Projeto  @relation(fields: [projetoId], references: [id])
  projetoId Int
  nome      String   @default("")
  cargo     String   @default("")
  telefone  String   @default("")
  email     String   @default("")
  tipo      String   @default("")
  principal Boolean  @default(false)
  ativo     Boolean? @default(true)
}

model ProjetoArquivos {
  id        String  @id @default(uuid())
  Projeto   Projeto @relation(fields: [projetoId], references: [id])
  projetoId Int
  arquivo   String
}

model ProjetoCidade {
  id        String  @id @default(uuid())
  Projeto   Projeto @relation(fields: [projetoId], references: [id])
  projetoId Int
  cidade    String
  estado    String
  diarias   Int
}

model Acompanhamento {
  id                      String                    @id @default(uuid())
  Projeto                 Projeto                   @relation(fields: [projetoId], references: [id])
  projetoId               Int
  horas                   Int
  dataInicio              DateTime
  dataFim                 DateTime
  AcompanhamentoCategoria AcompanhamentoCategoria[]
}

model AcompanhamentoCategoria {
  id                 String               @id @default(uuid())
  Acompanhamento     Acompanhamento       @relation(fields: [acompanhamentoId], references: [id])
  acompanhamentoId   String
  ProjetoCategoria   ProjetoCategoria     @relation(fields: [projetoCategoriaId], references: [id])
  projetoCategoriaId String
  horas              Int
  dataInicio         DateTime
  dataFim            DateTime
  AcompanhamentoItem AcompanhamentoItem[]
}

model AcompanhamentoItem {
  id                        String                  @id @default(uuid())
  AcompanhamentoCategoria   AcompanhamentoCategoria @relation(fields: [acompanhamentoCategoriaId], references: [id])
  acompanhamentoCategoriaId String
  projetoOS                 ProjetoOS               @relation(fields: [projetoOSId], references: [id])
  projetoOSId               String
  Usuario                   Usuario                 @relation(fields: [usuarioId], references: [id])
  usuarioId                 String
  horas                     Int
  dataInicio                DateTime
  dataFim                   DateTime
  Apontamento               Apontamento[]
}

model Apontamento {
  id                    String                  @id @default(uuid())
  AcompanhamentoItem    AcompanhamentoItem      @relation(fields: [acompanhamentoItemId], references: [id])
  acompanhamentoItemId  String
  Usuario               Usuario                 @relation(fields: [usuarioId], references: [id])
  usuarioId             String
  dataInicio            DateTime
  dataFim               DateTime
  descricao             String
  ApontamentoComentario ApontamentoComentario[]
  ApontamentoArquivo    ApontamentoArquivo[]
}

model ApontamentoComentario {
  id            String      @id @default(uuid())
  Apontamento   Apontamento @relation(fields: [apontamentoId], references: [id])
  apontamentoId String
  descricao     String
  data          DateTime
  Usuario       Usuario     @relation(fields: [usuarioId], references: [id])
  usuarioId     String
}

model ApontamentoArquivo {
  id            String      @id @default(uuid())
  Apontamento   Apontamento @relation(fields: [apontamentoId], references: [id])
  apontamentoId String
  arquivo       String
  Usuario       Usuario     @relation(fields: [usuarioId], references: [id])
  usuarioId     String
}

model ProjetoOS {
  id                 String               @id @default(uuid())
  osNum              Int
  ProjetoCategoria   ProjetoCategoria     @relation(fields: [projetoCategoriaId], references: [id], onDelete: Cascade)
  projetoCategoriaId String
  projetoItem        ProjetoItem          @relation(fields: [projetoItemId], references: [id])
  projetoItemId      String
  fornecedor         Pessoa?              @relation(fields: [pessoaId], references: [id])
  pessoaId           String?
  formaPagamento     FormaPagamento       @relation(fields: [formaPagamentoId], references: [id])
  unidade            UnidadeMedida        @relation(fields: [unidadeMedidaId], references: [id])
  unidadeMedidaId    String
  formaPagamentoId   String
  dataCriacao        DateTime             @default(now())
  status             String
  comercialQtd       Int
  comercialValorUN   Decimal
  comercialTotal     Decimal
  trabalhoQtd        Int
  trabalhoValorUN    Decimal
  trabalhoTotal      Decimal
  producaoQtd        Int
  producaoValorUn    Decimal
  producaoTotal      Decimal
  executado          Decimal
  pago               Decimal
  saldo              Decimal
  tipo               String
  AcompanhamentoItem AcompanhamentoItem[]
}

model Departamento {
  id             String           @id @default(uuid())
  empresa        Empresa          @relation(fields: [idEmpresa], references: [id])
  idEmpresa      String
  nome           String
  CentroCusto    CentroCusto[]
  OrcamentoDepto OrcamentoDepto[]
}

model CentroCusto {
  id             String          @id @default(uuid())
  nome           String
  empresa        Empresa         @relation(fields: [idEmpresa], references: [id])
  idEmpresa      String
  departamento   Departamento    @relation(fields: [departamentoId], references: [id])
  ContasPagar    ContasPagar[]
  departamentoId String
  ContasReceber  ContasReceber[]
  PedidoCompra   PedidoCompra[]
}

model ContasPagar {
  id                       String                  @id @default(uuid())
  empresa                  Empresa?                @relation(fields: [idEmpresa], references: [id])
  idEmpresa                String
  centroCusto              CentroCusto             @relation(fields: [centroCustoId], references: [id])
  centroCustoId            String
  pessoa                   Pessoa                  @relation("responsavelContasPagar", fields: [pessoaId], references: [id])
  pessoaId                 String
  vencOriginal             DateTime
  vencimento               DateTime
  valor                    Decimal
  dataEmissao              DateTime
  numDocumento             String
  competencia              DateTime
  historico                String
  FinanceiroCategoria      FinanceiroCategoria     @relation(fields: [categoriaLancamentoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoriaLancamentoId    String
  parcelaVencimento        Int
  parcela                  Int
  ContasPagarArquivo       ContasPagarArquivo[]
  usuario                  Usuario?                @relation(fields: [usuarioId], references: [id])
  usuarioId                String
  CondicaoPagamento        CondicaoPagamento       @relation(fields: [condicaoPagamentoId], references: [id])
  condicaoPagamentoId      String
  SubCategoriaLancamento   SubCategoriaLancamento? @relation(fields: [subCategoriaLancamentoId], references: [id])
  subCategoriaLancamentoId String?
  tipoRecebimento          String?
  origem                   String?
  contaFinanceiro          ContaFinanceiro         @relation(fields: [contaFinanceiroId], references: [id])
  contaFinanceiroId        String
  orcamentoDepto           OrcamentoDepto          @relation(fields: [orcamentoDeptoId], references: [id], onDelete: Cascade)
  orcamentoDeptoId         String
  empresaSaida             Pessoa?                 @relation("empresaSaidaContasPagar", fields: [empresaSaiadaId], references: [id])
  empresaSaiadaId          String?
}

model ContasPagarArquivo {
  id            String      @id @default(uuid())
  contasPagar   ContasPagar @relation(fields: [contasPagarId], references: [id], onDelete: Cascade)
  contasPagarId String
  arquivo       Arquivo     @relation(fields: [arquivoId], references: [id], onDelete: Cascade)
  arquivoId     String
}

model Arquivo {
  id                   String                 @id @default(uuid())
  contentLength        String
  contentType          String
  fileName             String
  url                  String
  ContasPagarArquivo   ContasPagarArquivo[]
  ContasReceberArquivo ContasReceberArquivo[]
}

model NovoProduto {
  id                             String                           @id @default(uuid())
  empresa                        Empresa                          @relation(fields: [idEmpresa], references: [id])
  idEmpresa                      String
  nome                           String
  sku                            String
  formato                        String
  tipo                           String
  precoVenda                     Decimal
  ativo                          Boolean                          @default(true)
  unidade                        UnidadeMedida                    @relation(fields: [unidadeMedidaId], references: [id])
  unidadeMedidaId                String
  condicao                       String
  modelo                         String
  marca                          String
  dataValidade                   String
  depreciacao                    String
  ncm                            String
  numSerie                       String
  NovoProdutoFornecedor          NovoProdutoFornecedor[]
  PedidoCompraItens              PedidoCompraItens[]
  OrcamentoProduto               OrcamentoProduto[]
  ModeloOrcamentoItemProdutoList ModeloOrcamentoItemProdutoList[]
  ProjetoProduto                 ProjetoProduto[]
}

model NovoProdutoFornecedor {
  id            String      @id @default(uuid())
  pessoa        Pessoa      @relation(fields: [pessoaId], references: [id])
  pessoaId      String
  novoProduto   NovoProduto @relation(fields: [novoProdutoId], references: [id])
  novoProdutoId String
}

model PedidoCompra {
  id                       String                     @id @default(uuid())
  empresa                  Empresa                    @relation(fields: [idEmpresa], references: [id])
  idEmpresa                String
  usuario                  Usuario?                   @relation(fields: [usuarioId], references: [id])
  usuarioId                String
  CondicaoPagamento        CondicaoPagamento          @relation(fields: [condicaoPagamentoId], references: [id])
  condicaoPagamentoId      String
  pessoa                   Pessoa                     @relation(fields: [pessoaId], references: [id])
  pessoaId                 String
  responsavel              Usuario                    @relation(name: "responsavelCompra", fields: [responsavelId], references: [id])
  responsavelId            String
  icms                     Decimal
  ipi                      Decimal
  valor                    Decimal
  valorPedido              Decimal
  desconto                 Decimal
  frete                    Decimal
  ordem                    Int                        @default(autoincrement())
  categoriaLancamentoId    String
  dataCompra               DateTime                   @default(now())
  dataPrevista             DateTime
  observacao               String
  PedidoCompraItens        PedidoCompraItens[]
  origem                   String?
  contaFinaceiro           ContaFinanceiro            @relation(fields: [contaFinanceiroId], references: [id])
  tipoRecebimento          String
  centroCusto              CentroCusto                @relation(fields: [centroCustoId], references: [id])
  centroCustoId            String
  PedidoCompraServicoItens PedidoCompraServicoItens[]
  contaFinanceiroId        String
  orcamentoDepto           OrcamentoDepto             @relation(fields: [orcamentoDeptoId], references: [id], onDelete: Cascade)
  orcamentoDeptoId         String
  empresaSaida             Pessoa?                    @relation("empresaSaidaCompras", fields: [empresaSaiadaId], references: [id])
  empresaSaiadaId          String?
}

model PedidoCompraItens {
  id              String        @id @default(uuid())
  pedidoCompra    PedidoCompra  @relation(fields: [pedidoCompraId], references: [id], onDelete: Cascade)
  pedidoCompraId  String
  novoProduto     NovoProduto   @relation(fields: [novoProdutoId], references: [id])
  novoProdutoId   String
  unidade         UnidadeMedida @relation(fields: [unidadeMedidaId], references: [id])
  unidadeMedidaId String
  produtoNome     String
  unidadeNome     String
  quantidade      Int
  valorUn         Decimal
  percentualIpi   String
  valorIpi        Decimal
  valorTotal      Decimal
}

model PedidoCompraServicoItens {
  id              String         @id @default(uuid())
  pedidoCompra    PedidoCompra   @relation(fields: [pedidoCompraId], references: [id], onDelete: Cascade)
  pedidoCompraId  String
  produto         Produto        @relation(fields: [produtoId], references: [id])
  produtoId       String
  descricao       String?
  unidade         UnidadeMedida? @relation(fields: [unidadeMedidaId], references: [id])
  unidadeMedidaId String?
  quantidade      Decimal
  valorUn         Decimal
  valorTotal      Decimal
}

model ContasReceber {
  id                   String                 @id @default(uuid())
  empresa              Empresa?               @relation(fields: [idEmpresa], references: [id])
  idEmpresa            String
  dataCriacao          DateTime               @default(now())
  dataEdicao           DateTime               @default(now())
  data                 DateTime
  empresaSaida         Pessoa?                @relation("empresaSaidaC", fields: [empresaSaiadaId], references: [id])
  empresaSaiadaId      String?
  cliente              Pessoa?                @relation("clientePessoaC", fields: [clientId], references: [id])
  clientId             String?
  documento            String
  emissao              DateTime
  vencimento           DateTime
  valor                Decimal
  regime               String
  formaRecebimento     String
  tipoRecebimento      String
  observcao            String
  status               String
  tipoConta            TipoConta              @relation(fields: [tipoLancamentoId], references: [id])
  tipoLancamentoId     String
  origem               String?
  usuario              Usuario                @relation(fields: [usuarioId], references: [id])
  usuarioId            String
  centroCusto          CentroCusto            @relation(fields: [centroCustoId], references: [id])
  condicaoPagamento    CondicaoPagamento      @relation(fields: [condicaoPagamentoId], references: [id])
  ContasReceberArquivo ContasReceberArquivo[]
  centroCustoId        String
  condicaoPagamentoId  String
  contaFinanceiro      ContaFinanceiro        @relation(fields: [contaFinanceiroId], references: [id])
  contaFinanceiroId    String
}

model ContasReceberArquivo {
  id              String        @id @default(uuid())
  contasReceber   ContasReceber @relation(fields: [contasReceberId], references: [id], onDelete: Cascade)
  contasReceberId String
  arquivo         Arquivo       @relation(fields: [arquivoId], references: [id], onDelete: Cascade)
  arquivoId       String
}

model ContaFinanceiro {
  id                          String          @id @default(uuid())
  empresa                     Empresa?        @relation(fields: [idEmpresa], references: [id])
  idEmpresa                   String
  banco                       String
  agencia                     String
  tipo                        String
  numero                      String
  validade                    String?
  descricao                   String          @default("Conta padrão")
  titular                     String
  tipoPessoa                  String
  documento                   String
  tipoconta                   TipoConta       @relation(fields: [idTipoConta], references: [id])
  idTipoConta                 String
  empresaSaidaContaFinanceiro Pessoa?         @relation("empresaSaidaContaFinanceiro", fields: [empresaSaiadaId], references: [id])
  empresaSaiadaId             String?
  PedidoCompra                PedidoCompra[]
  ContasPagar                 ContasPagar[]
  ContasReceber               ContasReceber[]
  ContaSaldo                  ContaSaldo[]
}

model OrcamentoDepto {
  id                      String                    @id @default(uuid())
  empresa                 Empresa?                  @relation(fields: [idEmpresa], references: [id])
  idEmpresa               String
  departamento            Departamento              @relation(fields: [departamentoId], references: [id], onDelete: Cascade)
  departamentoId          String
  total                   Decimal
  verba                   Decimal
  alocado                 Decimal
  disponivel              Decimal
  descricao               String
  vigencia                DateTime
  usuario                 Usuario                   @relation(fields: [usuarioId], references: [id])
  usuarioId               String
  OrcamentoDeptoCategoria OrcamentoDeptoCategoria[]
  PedidoCompra            PedidoCompra[]
  ContasPagar             ContasPagar[]
}

model OrcamentoDeptoCategoria {
  id                 String               @id @default(uuid())
  orcamentoDepto     OrcamentoDepto       @relation(fields: [orcamentoDeptoId], references: [id], onDelete: Cascade)
  orcamentoDeptoId   String
  descricao          String
  ordem              Int
  valor              Decimal
  OrcamentoDeptoItem OrcamentoDeptoItem[]
}

model OrcamentoDeptoItem {
  id                        String                  @id @default(uuid())
  orcamentoDeptoCategoria   OrcamentoDeptoCategoria @relation(fields: [orcamentoDeptoCategoriaId], references: [id], onDelete: Cascade)
  orcamentoDeptoCategoriaId String
  descricao                 String
  valorTotal                Decimal
  nivel                     Int
}

model PessoaContaFinanceiro {
  id         String  @id @default(uuid())
  banco      String
  agencia    String
  tipo       String
  numero     String
  validade   String?
  descricao  String  @default("Conta padrão")
  titular    String
  documento  String
  obs        String
  pessoa     Pessoa  @relation(fields: [pessoaId], references: [id])
  pessoaId   String
  tipoPessoa String
}

model ContaSaldo {
  id                String          @id @default(uuid())
  contaFinanceiro   ContaFinanceiro @relation(fields: [contaFinanceiroId], references: [id])
  contaFinanceiroId String
  data              DateTime
  valor             Decimal
  Lancamento        Lancamento      @relation(fields: [lancamentoId], references: [id])
  lancamentoId      String
  tipo              Boolean
}
